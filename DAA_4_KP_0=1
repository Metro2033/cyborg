int knapsack_dp(int *weight,int *value,int idx, int  w , int **dp){
    if(w<0){
        return -1e5;
    }if(idx<0){
        return 0;
    }
    int pick = value[idx]+knapsack_dp(weight,value,idx-1,w-weight[idx],dp);
    int not_pick = knapsack_dp(weight,value,idx-1,w,dp);

    dp[idx][w]= max(pick,not_pick);
    return dp[idx][w];
}
void knapsack_runner(){
    int n ,w;
    cin>>n>>w;
    int *values = new int[n];
    int *weight = new int[n];
    for(int i=0;i<n;i++){
        cin>>values[i];
    }
    for(int i=0;i<n;i++){
        cin>>weight[i];
    }
    int** dp= new int*[n+1];
    for(int i=0;i<=n;i++){
        dp[i]= new int[w+1];
    }

    cout<<knapsack_dp(weight,values,n-1,w,dp)<<endl;
}
